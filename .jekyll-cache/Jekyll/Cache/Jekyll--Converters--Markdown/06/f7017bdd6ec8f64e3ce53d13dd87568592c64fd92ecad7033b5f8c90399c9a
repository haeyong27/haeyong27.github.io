I"tW<ul>
  <li><a href="#django-model---meta-attribute-methods">Django model - Meta, attribute, methods</a>
    <ul>
      <li><a href="#1-meta">1. Meta</a></li>
      <li><a href="#2-model-attributes-manager">2. Model attributes (Manager)</a>
        <ul>
          <li><a href="#custom-managers">Custom managers</a>
            <ul>
              <li><a href="#adding-extra-manager-methods">Adding extra manager methods</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#3-model-methods">3. Model methods</a></li>
      <li><a href="#%ea%b2%b0%eb%a1%a0">결론</a>
        <ul>
          <li><a href="#%ec%9a%94%ec%95%bd">요약</a></li>
          <li><a href="#%eb%82%b4-%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8%ec%97%90-%ec%a0%81%ec%9a%a9">내 프로젝트에 적용</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="django-model---meta-attribute-methods">Django model - Meta, attribute, methods</h1>

<h2 id="1-meta">1. Meta</h2>
<p><a href="https://docs.djangoproject.com/en/2.2/topics/db/models/#meta-options">Models | Django documentation | Django</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">Ox</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">horn_length</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">ordering</span> <span class="o">=</span> <span class="p">[</span><span class="s">"horn_length"</span><span class="p">]</span>
        <span class="n">verbose_name_plural</span> <span class="o">=</span> <span class="s">"oxen"</span>
</code></pre></div></div>

<blockquote>
  <p>Model metadata is “anything that’s not a field”, such as ordering options ( <a href="https://docs.djangoproject.com/en/2.2/ref/models/options/#django.db.models.Options.ordering">ordering</a> ), database table name ( <a href="https://docs.djangoproject.com/en/2.2/ref/models/options/#django.db.models.Options.db_table">db_table</a> ), or human-readable singular and plural names ( <a href="https://docs.djangoproject.com/en/2.2/ref/models/options/#django.db.models.Options.verbose_name">verbose_name</a>  and  <a href="https://docs.djangoproject.com/en/2.2/ref/models/options/#django.db.models.Options.verbose_name_plural">verbose_name_plural</a> ). None are required, and adding <strong>class Meta</strong> to a model is completely optional.
A complete list of all possible <strong>Meta</strong> options can be found in the  <a href="https://docs.djangoproject.com/en/2.2/ref/models/options/">model option reference</a> .</p>

  <p>모델 메타데이터는 필드가 아닌 모든것을 뜻합니다. 예를들어 정렬옵션, db table이름, 사람이 읽기 편한 이름 등이 있습니다. 필수는 아니고 옵션입니다. 관련 옵션들은 <a href="https://docs.djangoproject.com/en/2.2/ref/models/options/">여기</a>에 있습니다.</p>
</blockquote>

<h2 id="2-model-attributes-manager">2. Model attributes (Manager)</h2>
<p><a href="https://docs.djangoproject.com/en/2.2/topics/db/models/#model-attributes">Models | Django documentation | Django</a></p>

<p><strong>objects</strong></p>
<blockquote>
  <p>The most important attribute of a model is the  <a href="https://docs.djangoproject.com/en/2.2/topics/db/managers/#django.db.models.Manager">Manager</a> . It’s the interface through which database query operations are provided to Django models and is used to  <a href="https://docs.djangoproject.com/en/2.2/topics/db/queries/#retrieving-objects">retrieve the instances</a>  from the database. If no custom <strong>Manager</strong> is defined, the default name is  <a href="https://docs.djangoproject.com/en/2.2/ref/models/class/#django.db.models.Model.objects">objects</a> . Managers are only accessible via model classes, not the model instances.</p>
</blockquote>

<p>모델의 가장 중요한 속성중 하나는 <a href="https://docs.djangoproject.com/en/2.2/topics/db/managers/#django.db.models.Manager">Manager</a> 입니다. 이 인터페이스를 통해 Django models로 쿼리작업이 이루어지고 데이터베이스로부터 인스턴스를 받아올 수 있습니다. Manager를 따로 정해주지 않으면 디폴트 이름값은 objects입니다. models instances가 아닌 model class를 통해서만 접근할 수 있습니다.</p>

<h3 id="custom-managers">Custom managers</h3>
<p><a href="https://docs.djangoproject.com/en/2.2/topics/db/managers/#custom-managers">Managers | Django documentation | Django</a></p>

<blockquote>
  <p>There are two reasons you might want to customize a <strong>Manager</strong>: to add extra <strong>Manager</strong> methods, and/or to modify the initial <strong>QuerySet</strong> the <strong>Manager</strong> returns.</p>
</blockquote>

<p>커스텀하는 이유</p>
<ol>
  <li>manager methods 추가</li>
  <li>initail queryset 수정</li>
</ol>

<h4 id="adding-extra-manager-methods">Adding extra manager methods</h4>
<p><a href="https://docs.djangoproject.com/en/2.2/topics/db/managers/#adding-extra-manager-methods">Managers | Django documentation | Django</a></p>

<blockquote>
  <p>Adding extra <strong>Manager</strong> methods is the preferred way to add “table-level” functionality to your models. (For “row-level” functionality – i.e., functions that act on a single instance of a model object – use  <a href="https://docs.djangoproject.com/en/2.2/topics/db/models/#model-methods">Model methods</a> , not custom <strong>Manager</strong> methods.)
A custom <strong>Manager</strong> method can return anything you want. It doesn’t have to return a <strong>QuerySet</strong>.
For example, this custom <strong>Manager</strong> offers a method <strong>with_counts()</strong>, which returns a list of all <strong>OpinionPoll</strong> objects, each with an extra <strong>num_responses</strong> attribute that is the result of an aggregate query:</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">PollManager</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Manager</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">with_counts</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">connection</span>
        <span class="k">with</span> <span class="n">connection</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span> <span class="k">as</span> <span class="n">cursor</span><span class="p">:</span>
            <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"""
                SELECT p.id, p.question, p.poll_date, COUNT(*)
                FROM polls_opinionpoll p, polls_response r
                WHERE p.id = r.poll_id
                GROUP BY p.id, p.question, p.poll_date
                ORDER BY p.poll_date DESC"""</span><span class="p">)</span>
            <span class="n">result_list</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetchall</span><span class="p">():</span>
                <span class="n">p</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">model</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">question</span><span class="o">=</span><span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">poll_date</span><span class="o">=</span><span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
                <span class="n">p</span><span class="o">.</span><span class="n">num_responses</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
                <span class="n">result_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">result_list</span>

<span class="k">class</span> <span class="nc">OpinionPoll</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">question</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="n">poll_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateField</span><span class="p">()</span>
    <span class="n">objects</span> <span class="o">=</span> <span class="n">PollManager</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">Response</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">poll</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">OpinionPoll</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">CASCADE</span><span class="p">)</span>
    <span class="n">person_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>

</code></pre></div></div>

<h2 id="3-model-methods">3. Model methods</h2>
<p><a href="https://docs.djangoproject.com/en/2.2/topics/db/models/#model-methods">Models | Django documentation | Django</a></p>

<blockquote>
  <p>Define custom methods on a model to add custom “row-level” functionality to your objects. Whereas  <a href="https://docs.djangoproject.com/en/2.2/topics/db/managers/#django.db.models.Manager">Manager</a>  methods are intended to do “table-wide” things, model methods should act on a particular model instance.
This is a valuable technique for keeping business logic in one place – the model.
For example, this model has a few custom methods:</p>
</blockquote>

<p>모델의 객체에서 row level 수준으로 동작할 custom methods를 정의할 수 있다. Manager methods는 table wide인 반면 model methodssms 특정 모델 인스턴스에서 작동한다. 이는 비즈니스 로직에서 중요한 기술이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">first_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">last_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">birth_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateField</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">baby_boomer_status</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"Returns the person's baby-boomer status."</span>
        <span class="kn">import</span> <span class="nn">datetime</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">birth_date</span> <span class="o">&lt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">1945</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">return</span> <span class="s">"Pre-boomer"</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">birth_date</span> <span class="o">&lt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">1965</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">return</span> <span class="s">"Baby boomer"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">"Post-boomer"</span>

    <span class="o">@</span><span class="nb">property</span>
    <span class="k">def</span> <span class="nf">full_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"Returns the person's full name."</span>
        <span class="k">return</span> <span class="s">'</span><span class="si">%</span><span class="s">s </span><span class="si">%</span><span class="s">s'</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">first_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">last_name</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="결론">결론</h2>
<h3 id="요약">요약</h3>
<ol>
  <li>model attribute (manager) : 하나의 모델, 하나의 테이블, 모델의 인스턴스에 국한된 속성
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Book</span><span class="o">.</span><span class="n">dahl_objects</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span>
<span class="n">Book</span><span class="o">.</span><span class="n">dahl_objects</span><span class="o">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s">'Matilda'</span><span class="p">)</span>
<span class="n">Book</span><span class="o">.</span><span class="n">dahl_objects</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</code></pre></div>    </div>
  </li>
  <li>model method : low level부터 접근가능, 다른 모델과 연계해서 사용할 수 있다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
 <span class="n">first_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
 <span class="n">last_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
 <span class="n">birth_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateField</span><span class="p">()</span>

 <span class="k">def</span> <span class="nf">baby_boomer_status</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
     <span class="s">"Returns the person's baby-boomer status."</span>
     <span class="kn">import</span> <span class="nn">datetime</span>
     <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">birth_date</span> <span class="o">&lt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">1945</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
         <span class="k">return</span> <span class="s">"Pre-boomer"</span>
     <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">birth_date</span> <span class="o">&lt;</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">1965</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
         <span class="k">return</span> <span class="s">"Baby boomer"</span>
     <span class="k">else</span><span class="p">:</span>
         <span class="k">return</span> <span class="s">"Post-boomer"</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="내-프로젝트에-적용">내 프로젝트에 적용</h3>
<p>내가 작업하고 있는 인스타그램 클론프로젝트의 Django : models.py의 일부분이다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Post</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
		<span class="o">...</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">(</span><span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">tag_set</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="s">"Tag"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Tag</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>내가 구현하려 했던 기능은</p>
<ol>
  <li>Post를 작성하고 저장하면서 내용에서 해시태그를 추출</li>
  <li>추출한 태그를 자동으로 Post table의 tag_set 필드에 저장.</li>
</ol>

<p>model methods만 활용하면 충분하다고 판단했고 간략하게 다음과 같이 코딩할 예정이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Post</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
		<span class="o">...</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">(</span><span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">tag_set</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="s">"Tag"</span><span class="p">)</span>

	  <span class="k">def</span> <span class="nf">set_tags</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
		  <span class="n">tag_set</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">content</span><span class="err">에서</span> <span class="n">tag</span> <span class="err">추출</span>
		  <span class="n">t</span> <span class="o">=</span> <span class="n">Tag</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get_or_create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">tag_set</span><span class="p">)</span>
		  <span class="bp">self</span><span class="o">.</span><span class="n">tag_set</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</code></pre></div></div>

<p>#study/programming/django
9 Nov 2019 3:51 PM</p>
:ET