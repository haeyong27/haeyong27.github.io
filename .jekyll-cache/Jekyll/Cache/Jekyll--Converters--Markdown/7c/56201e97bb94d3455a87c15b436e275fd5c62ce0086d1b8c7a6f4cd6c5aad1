I"k!<ul>
  <li><a href="#routing">routing</a>
    <ul>
      <li><a href="#midleware">midleware</a></li>
      <li><a href="#example">example</a></li>
    </ul>
  </li>
  <li><a href="#api-the-middleware-property">API: The middleware Property</a>
    <ul>
      <li><a href="#named-middleware">Named middleware</a></li>
    </ul>
  </li>
  <li><a href="#auth-external-api--jwt">Auth External API : JWT</a></li>
</ul>

<p>Vuejs Authentication</p>

<h1 id="routing">routing</h1>
<h2 id="midleware">midleware</h2>
<p><a href="https://nuxtjs.org/guide/routing#middleware">Routing - NuxtJS</a></p>
<blockquote>
  <p>Middleware lets you define custom functions that can be run before rendering either a page or a group of pages.</p>
</blockquote>

<p>미들웨어는 페이지가 렌더링 되기 전에 실행되야하는 함수를 정의할 수 있도록 해줍니다.</p>

<blockquote>
  <p>Every middleware should be placed in the middleware/directory. The filename will be the name of the middleware (middleware/auth.js will be the auth middleware). 
A middleware receives  <a href="https://nuxtjs.org/api/context">the context</a>  as first argument:</p>
</blockquote>

<p>미들웨어는 컨텍스트를 첫번째 인자로 받습니다.</p>

<hr />

<p>context 란?</p>
<blockquote>
  <p>The context provides additional objects/params from Nuxt to Vue components and is available in special nuxt lifecycle areas like* <a href="https://nuxtjs.org/api">asyncData</a> <em>,</em> <a href="https://nuxtjs.org/api/pages-fetch">fetch</a> <em>,</em> <a href="https://nuxtjs.org/guide/plugins">plugins</a> <em>,</em> <a href="https://nuxtjs.org/guide/routing#middleware">middleware</a> <em>and</em> <a href="https://nuxtjs.org/guide/vuex-store#the-nuxtserverinit-action">nuxtServerInit</a> <em>.</em></p>
</blockquote>

<p>컨텍스트는 객체나 매개변수를 넉스트에서 vue components로 전달하고 asyncData, fetch 등과 같은 lifecycle areas에서 사용가능합니다.</p>

<hr />

<blockquote>
  <p>In universal mode, middlewares will be called server-side once (on the first request to the Nuxt app or when page refreshes) and client-side when navigating to further routes. In SPA mode, middlewares will be called client-side on the first request and when navigating to further routes.</p>
</blockquote>

<ul>
  <li>universal 모드 : 다른 경로로 이동할 때 미들웨어는 서버사이드(첫번 째 요청이나 page 새로고침하는 경우)와 클라이언트 사이드에서 호출됩니다.</li>
  <li>SPA 모드 : 다른 경로로 이동할 때 미들웨어는 클라이언트 사이드(첫번째 리퀘스트)에서 호출됩니다.</li>
</ul>

<blockquote>
  <p>The middleware will be executed in series in this order:
미들웨어는 다음 순서로 순차적으로 실행됩니다.</p>
</blockquote>

<ol>
  <li>nuxt.config.js (in the order within the file)</li>
  <li>Matched layouts</li>
  <li>Matched pages</li>
</ol>

<blockquote>
  <p>A middleware can be asynchronous. To do this, simply return a Promise or use the 2nd callback argument:</p>
</blockquote>

<p>미들웨어는 비동기입니다.</p>

<h2 id="example">example</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// middleware/stats.js</span>
<span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="err">‘</span><span class="nx">axios</span><span class="err">’</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="p">({</span> <span class="nx">route</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="err">‘</span><span class="nx">http</span><span class="p">:</span><span class="c1">//my-stats-api.com’, {</span>
    <span class="nx">url</span><span class="p">:</span> <span class="nx">route</span><span class="p">.</span><span class="nx">fullPath</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Then, in your nuxt.config.js , use the router.middleware key:</p>

<p>Then, in your <strong><code class="highlighter-rouge">nuxt.config.js</code></strong> , use the <strong><code class="highlighter-rouge">router.middleware</code></strong> key:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//nuxt.config.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">router</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">middleware</span><span class="p">:</span> <span class="err">‘</span><span class="nx">stats</span><span class="err">’</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>Now the stats middleware will be called for every route change.</p>
</blockquote>

<p>이제 stats midleware는 라우트가 바뀔 때마다 실행됩니다.</p>

<blockquote>
  <p>You can add your middleware to a specific layout or page as well: <strong><code class="highlighter-rouge">pages/index.vue</code></strong> or <strong><code class="highlighter-rouge">layouts/default.vue</code></strong> 
특정 페이지나 레이아웃에만 미들웨어를 추가할 수 있습니다.</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">middleware</span><span class="p">:</span> <span class="err">‘</span><span class="nx">stats</span><span class="err">’</span>
<span class="p">}</span>
</code></pre></div></div>
<h1 id="api-the-middleware-property">API: The middleware Property</h1>

<p>참고 : <a href="https://nuxtjs.org/api/pages-middleware#named-middleware">API: The middleware Property - NuxtJS</a></p>

<h2 id="named-middleware">Named middleware</h2>
<blockquote>
  <p>You can create named middleware by creating a file inside the <code class="highlighter-rouge">middleware/</code> directory, the file name will be the middleware name.</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//middleware/authenticated.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="p">({</span> <span class="nx">store</span><span class="p">,</span> <span class="nx">redirect</span> <span class="p">})</span> <span class="p">{</span>
  <span class="c1">// If the user is not authenticated</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">store</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">authenticated</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">redirect</span><span class="p">(</span><span class="err">‘</span><span class="o">/</span><span class="nx">login</span><span class="err">’</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//pages/secret.vue</span>
<span class="o">&lt;</span><span class="nx">template</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Secret</span> <span class="nx">page</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/template</span><span class="err">&gt;
</span>
<span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">middleware</span><span class="p">:</span> <span class="err">‘</span><span class="nx">authenticated</span><span class="err">’</span>
<span class="p">}</span>
<span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span></code></pre></div></div>

<h1 id="auth-external-api--jwt">Auth External API : JWT</h1>
<p><a href="https://nuxtjs.org/examples/auth-external-jwt">Auth External API (JWT) - NuxtJS</a></p>
:ET