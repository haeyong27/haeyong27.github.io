<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Actually, less is more!</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 12 May 2019 03:44:41 +0900</pubDate>
    <lastBuildDate>Sun, 12 May 2019 03:44:41 +0900</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Django templates</title>
        <description>&lt;p&gt;템플릿 기능에 제한을 둠으로서, 비즈니스 로직을 템플릿 단에 구현함을 방지.
비즈니스 로직은 model에, form/modelform을 통한 유효성 검사 및 저장을 권장&lt;/p&gt;

&lt;p&gt;settings.TEMPLATES 설정 리스트&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;backend : 템플릿 엔진 지정&lt;/li&gt;
  &lt;li&gt;dirs : 경로리스트 (filesystem loader)&lt;/li&gt;
  &lt;li&gt;app_dirs : 앱별 templates 경로 추가 여부&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;각 앱들을 위한 템플릿은 ‘앱/templates/’경로에 배치&lt;br /&gt;
프로젝트 전반적으로 사용할 템플릿은 DIRS에 명시한 경로에 배치&lt;/p&gt;

&lt;h2 id=&quot;장고-템플릿-태그필터&quot;&gt;장고 템플릿 태그/필터&lt;/h2&gt;
&lt;p&gt;Django Template Tag &lt;code class=&quot;highlighter-rouge&quot;&gt;{ % 태그명 '인자1' '인자2' %}&lt;/code&gt;와 같은 형식으로 호출&lt;br /&gt;
Django Template Filter &lt;code class=&quot;highlighter-rouge&quot;&gt;{ { 값|필터1:인자|필터2:인자|필터3 }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;for/endfor, if/endif, include, load, verbatim등 다양한 빌트인 탬플릿 태그/필터가 제공된다.&lt;/p&gt;

&lt;h2 id=&quot;장고가-템플릿-파일을-찾는-원리loader&quot;&gt;장고가 템플릿 파일을 찾는 원리(loader)&lt;/h2&gt;
&lt;h3 id=&quot;왜-템플릿-파일은-앱이름templates앱이름post_listhtml과-같은-구조를-가져야만-하는-지&quot;&gt;왜 템플릿 파일은 앱이름/templates/앱이름/post_list.html과 같은 구조를 가져야만 하는 지&lt;/h3&gt;
&lt;p&gt;다양한 템플릿 로더가 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;파일 시스템 로더&lt;/li&gt;
  &lt;li&gt;앱 디렉토리 로더&lt;/li&gt;
  &lt;li&gt;cached 로더&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;템플릿 로더에게 템플릿을 찾아달라고 요청을 하게된다. 그 대표적인 예로 render라는 함수가 있다. 
ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;render(request, 'blog/post_list.html')&lt;/code&gt;
여기서 ‘blog/post_list.html’ 이 부분을 가지고 템플릿을 찾게되는데 먼저 파일 시스템로더, 두번째로 앱 디렉토리 로더를 찾는다.&lt;/p&gt;

&lt;p&gt;settings.TEMPLATES 의 DIRS = [] 설정에 의존한다.&lt;/p&gt;

&lt;h2 id=&quot;템플릿-상속을-통한-중복-제거&quot;&gt;템플릿 상속을 통한 중복 제거&lt;/h2&gt;
&lt;p&gt;각 뷰에 연결된 템플릿은 독립적으로 동작한다.&lt;/p&gt;

&lt;h4 id=&quot;기본특징&quot;&gt;기본특징&lt;/h4&gt;
&lt;p&gt;상속은 여러단계로 이뤄질 수 있고, block에는 이름을 할당해야하며, 이름을 통해 구분한다. 그렇기 때문에 유일해야한다.&lt;br /&gt;
부모템플릿은 자식 템플릿이 비집고 들어올 수 있는 다수의 영역(block)을 정의할 수 있다.&lt;/p&gt;

&lt;p&gt;검색해보기 : block.super&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{ % block title %} Blog for 황해용 { % endblock %}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;lightyellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
        { % block extra_head %}{ % endblock %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;황해용&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        { % block content %}
        { % endblock %}


        { % block extra_body %}{ % endblock %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{ % block extra_head %}{ % endblock %}&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;{ % block extra_body %}{ % endblock %}&lt;/code&gt;&lt;br /&gt;
부모가 자식이 비집고 들어올 수 있는 공간을 만들어 주는게 좋다.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 May 2019 14:31:01 +0900</pubDate>
        <link>http://localhost:4000/2019/05/11/django_template/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/11/django_template/</guid>
        
        <category>django</category>
        
        
        <category>backend</category>
        
      </item>
    
      <item>
        <title>다양한 구동환경을 위한 settings / requirements.txt 분기</title>
        <description>&lt;p&gt;실행환경 별로 필요한 라이브러리가 다를 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;공통&lt;/li&gt;
  &lt;li&gt;개발용&lt;/li&gt;
  &lt;li&gt;배포용(AWS)&lt;/li&gt;
  &lt;li&gt;배포용(Heroku)&lt;/li&gt;
  &lt;li&gt;서비스 2.0 개발용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;settings란&quot;&gt;settings란?&lt;/h2&gt;
&lt;p&gt;다양한 프로젝트 설정을 담는 파이썬 소스파일&lt;br /&gt;
장고 앱, DB 설정, 캐시 설정&lt;br /&gt;
디폴트는 (django/conf/global_settings.py)를 기본으로 하고, 지정 settings를 통해 필요한 설정을 재정의한다.&lt;/p&gt;

&lt;p&gt;os.environ.setdefualt(key, default=None)&lt;br /&gt;
os.environ는 dict과 유사한 인터페이스이다.&lt;br /&gt;
dict.setdefault(key, default=None)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if 'DJANGO_SETTINGS_MODULE' not in os.environs:
    os.environs['DJANGO_SETTINGS_MODULE']='askcompnay.settings'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;manage.py, wsgi.py에 있다.&lt;/p&gt;

&lt;p&gt;이또한 settings폴더를 만들고, __init__.py를 집어넣은다음, prod.py, common.py 등을 만들어서 사용할 수 있다. 주의할점은 manage.py, wsgi.py에 os.environ.setdefualt값을 잘 정해줘야 오류없이 실행시킬 수 있다.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 May 2019 14:31:01 +0900</pubDate>
        <link>http://localhost:4000/2019/05/11/django_settings/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/11/django_settings/</guid>
        
        <category>setting</category>
        
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>REST API</title>
        <description>&lt;p&gt;youtube : &lt;a href=&quot;https://www.youtube.com/watch?v=RP_f5dMoHFc&amp;amp;t=35s&quot;&gt;그런 REST API로 괜찮은가&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;서버와 클라이언트가 독립적으로 진화한다.
서버의 기능이 변경되어도 클라이언트를 업데이트할 필요가 없다. 
REST를 만들게 된 계기 : How do I improve HTTP without breaking the web.&lt;/p&gt;

&lt;p&gt;현재 웹 페이지를 변경했다고 웹 브라우저를 업데이트할 필요는 없다. 반대도 마찬가지
http명세가 변경되어도 웹은 잘 동작한다.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 May 2019 16:42:00 +0900</pubDate>
        <link>http://localhost:4000/2019/05/10/rest/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/10/rest/</guid>
        
        <category>backend</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>iterm2 setting</title>
        <description>&lt;h2 id=&quot;customizing&quot;&gt;customizing&lt;/h2&gt;

&lt;p&gt;youtube : &lt;a href=&quot;https://www.youtube.com/watch?v=pTW02GMeI74&quot;&gt;Customizing iterm2 with ZSH and PowerLevel9k&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;reinstall-zsh-cuz-not-working-conda&quot;&gt;reinstall zsh (cuz not working conda)&lt;/h2&gt;

&lt;h3 id=&quot;delete-oh-my-zsh&quot;&gt;delete oh my zsh&lt;/h3&gt;
&lt;p&gt;Uninstalling Oh My Zsh
Oh My Zsh isn’t for everyone. We’ll miss you, but we want to make this an easy breakup.&lt;/p&gt;

&lt;p&gt;If you want to uninstall oh-my-zsh, just run &lt;code class=&quot;highlighter-rouge&quot;&gt;uninstall_oh_my_zsh&lt;/code&gt; from the command-line. It will remove itself and revert your previous bash or zsh configuration.&lt;/p&gt;

&lt;h3 id=&quot;reinstall&quot;&gt;reinstall&lt;/h3&gt;
&lt;p&gt;stack overflow : &lt;a href=&quot;https://stackoverflow.com/a/35375476/7265837&quot;&gt;Zsh: Conda/Pip installs command not found&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As of today Nov 4, 2018 all the following methods works, install the zsh with:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 10 May 2019 16:42:00 +0900</pubDate>
        <link>http://localhost:4000/2019/05/10/iterm2/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/10/iterm2/</guid>
        
        <category>settings</category>
        
        
        <category>etc</category>
        
      </item>
    
      <item>
        <title>VSCode 장고 디버깅 세팅하기</title>
        <description>&lt;p&gt;디버깅을 위한 옵션
runserver –noreload –nothreading&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.askcompany.kr/r/articles/fdd389f/&quot;&gt;Ask Company VOD&lt;/a&gt; 의 컨텐츠를 기반으로 작성된 포스팅입니다. &lt;br /&gt;
&lt;img src=&quot;https://askcompanyjpe.blob.core.windows.net/static/askcompany_vod_shared_banner.jpg&quot; style=&quot;border: 0; width: 250px;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 10 May 2019 16:42:00 +0900</pubDate>
        <link>http://localhost:4000/2019/05/10/debug/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/10/debug/</guid>
        
        <category>debug</category>
        
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>django start</title>
        <description>&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;
&lt;p&gt;웹 서비스, 앱 서버, 챗봇 서비스 
웹 서비스를 만들 때 마다 반복되는것들을 표준화 해서 묶어놓은것 
모든 언어 마다 웹 프레임워크가 존재한다.&lt;/p&gt;

&lt;p&gt;django는 백엔드 개발에 필요한 거의 모든 기능을 제공한다&lt;/p&gt;

&lt;h3 id=&quot;django의-강점&quot;&gt;django의 강점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;python 생태계&lt;/li&gt;
  &lt;li&gt;풀스탤 웹 프레임워크&lt;/li&gt;
  &lt;li&gt;10년동안 성숙&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;웹-서비스-개발-파트&quot;&gt;웹 서비스 개발 파트&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;백엔드 개발&lt;/li&gt;
  &lt;li&gt;서버운영&lt;/li&gt;
  &lt;li&gt;프론트엔드 개발&lt;/li&gt;
  &lt;li&gt;앱 개발&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;환경세팅&quot;&gt;환경세팅&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.anaconda.com/anaconda/user-guide/faq/&quot;&gt;아나콘다 설치 팁&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see if the conda installation of Python is in your PATH variable:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On macOS and Linux, open the terminal and run—&lt;code class=&quot;highlighter-rouge&quot;&gt;echo $PATH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;On Windows, open an Anaconda Prompt and run—&lt;code class=&quot;highlighter-rouge&quot;&gt;echo %PATH%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To see which Python installation is currently set as the default:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On macOS and Linux, open the terminal and run—&lt;code class=&quot;highlighter-rouge&quot;&gt;which python&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;On Windows, open an Anaconda Prompt and run—&lt;code class=&quot;highlighter-rouge&quot;&gt;where python&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To see which packages are installed in your current conda environment and their version numbers, in your terminal window or an Anaconda Prompt, run &lt;code class=&quot;highlighter-rouge&quot;&gt;conda list&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;장고의-주요-기능&quot;&gt;장고의 주요 기능&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Views : HTTP 요청 처리&lt;/li&gt;
  &lt;li&gt;Models : 데이터베이스와의 인터페이스&lt;/li&gt;
  &lt;li&gt;Templates : 문자열 조합을 용이하게&lt;/li&gt;
  &lt;li&gt;Admin : 데이터베이스 레코드 관리 UI&lt;/li&gt;
  &lt;li&gt;Loggin : 메세지 로깅&lt;/li&gt;
  &lt;li&gt;Static files : 정적인 파일 관리&lt;/li&gt;
  &lt;li&gt;Messages framework : 메세지 노출&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;modelsviews-모듈을-팩키지로-전환-&quot;&gt;models/views 모듈을 팩키지로 전환 ?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;모듈 : 파이썬 소스코드 파일&lt;/li&gt;
  &lt;li&gt;팩키지 : 파이썬 소스코드 디렉토리&lt;/li&gt;
  &lt;li&gt;1안) 다음 기본 구성을&lt;/li&gt;
  &lt;li&gt;shop/models.py 내 Item모델, Review모델&lt;/li&gt;
  &lt;li&gt;2안) 앱 복잡도에 따라, 다음과 같이 변경해보실 수도 있습니다.&lt;/li&gt;
  &lt;li&gt;shop/models/&lt;/li&gt;
  &lt;li&gt;item.py 내 Item모델&lt;/li&gt;
  &lt;li&gt;review.py 내 Review모델&lt;/li&gt;
  &lt;li&gt;__init__.py 내에서는 from .item import * 와 같이 임포트하게되면, 모델 외부에
서는 (1안)과 동일하게 사용할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;장고쉘&quot;&gt;장고쉘&lt;/h2&gt;
&lt;p&gt;python manage.py shell&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install django-extensions&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;장고-모델-orm&quot;&gt;장고 모델 (ORM)&lt;/h2&gt;
&lt;p&gt;object relational mapping
데이터 베이스 :RDBMS, NoSQL
파일 : 로컬, 외부 정적 스토리지
캐시서버 : memcached, redis&lt;/p&gt;

&lt;p&gt;모델명과 DB 테이블 명
DB 테이블명 : 디폴트 “앱이름_모델명”
예&lt;br /&gt;
blog 앱 
Post 모델 -&amp;gt; ‘blog_post’
Comment 모델 -&amp;gt; ‘blog_comment’&lt;/p&gt;

&lt;h2 id=&quot;모델을-통한-데이터-조회&quot;&gt;모델을 통한 데이터 조회&lt;/h2&gt;
&lt;p&gt;ModelCls.objects.all() -&amp;gt; QuerySet 
순회가능한 객체이다. 
Chaining을 지원한다.
• QueyrSet은 Lazy한 특성
• QuerySet을 만드는 동안에는 DB접근을 하지 않습니다.
• 실제로 데이터가 필요한 시점에 접근을 합니다.&lt;/p&gt;

&lt;h2 id=&quot;모델을-통한-데이터-생성수정삭제&quot;&gt;모델을 통한 데이터 생성/수정/삭제&lt;/h2&gt;

&lt;p&gt;post = Post.objects 모델메니저
post.create(field1=valeu1, field2=value2)
**{dict} 형태로 unpack하여 인자를 전달할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;django-form&quot;&gt;Django Form&lt;/h2&gt;
&lt;p&gt;Model 클래스와 유사하다&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;입력폼 HTML 생성&lt;/li&gt;
  &lt;li&gt;입력폼 값 검증(Validation)&lt;/li&gt;
  &lt;li&gt;검증을 통과한 값들을 사전타입으로 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;form처리&quot;&gt;Form처리&lt;/h3&gt;
&lt;p&gt;폼 처리 시에 같은 URL에서 GET/POST로 나눠 처리한다&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;GET
입력폼을 보여준다&lt;/li&gt;
  &lt;li&gt;POST
데이터를 입력받아 유효성 검증과정을 거친다.
성공시 : 데이터를 저장하고 SUCCESS URL로 이동
실패시 : 오류메세지와 입력폼을 다시 보여줌&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 09 May 2019 14:31:01 +0900</pubDate>
        <link>http://localhost:4000/2019/05/09/django_start/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/09/django_start/</guid>
        
        <category>django</category>
        
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>platform</title>
        <description>&lt;p&gt;브런치&lt;br /&gt;
&lt;a href=&quot;https://brunch.co.kr/@rainpour/3&quot;&gt;스타트업에 대하여&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 08 May 2019 20:40:00 +0900</pubDate>
        <link>http://localhost:4000/2019/05/08/youtubeapi/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/08/youtubeapi/</guid>
        
        <category>platform</category>
        
        
        <category>etc</category>
        
      </item>
    
      <item>
        <title>첫 포스트</title>
        <description>&lt;p&gt;첫 글&lt;/p&gt;

&lt;p&gt;First POST build by Jekyll.&lt;/p&gt;

</description>
        <pubDate>Mon, 22 Apr 2019 14:31:01 +0900</pubDate>
        <link>http://localhost:4000/2019/04/22/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/22/welcome-to-jekyll/</guid>
        
        <category>debug</category>
        
        
        <category>daily</category>
        
      </item>
    
  </channel>
</rss>
